---
title: script
format: pdf
execute: 
  eval: false
---

### **Turn on keyboard shortcut broadcasting**

## Package Structure and State

```{r}
.libPaths()
```

***back to slides***

## Get Ready

```{r}
all(c("devtools", "roxygen2", "testthat", "knitr", "pkgdown") %in% installed.packages())
```

```{r}
library(devtools)

has_devel()
dev_sitrep()
```

```{r}
git_sitrep()
dev_sitrep()
```

***back to slides***

## Create a package

```{r}
library(devtools)
create_package("~/Desktop/libminer")
```

*Explore package structure in RStudio with learners*

***back to slides***

```{r}
# gert::git_config()
# gert::git_config_global()

use_git_config(
  user.name = "Andy Teucher", 
  user.email = "andy.teucher@gmail.com"
)
```



Git global: Name, email GitHub user: PAT discovered, User, email(s)

```{r}
use_git()
```

***back to slides***

```{r}
usethis::use_devtools()
```

Restart R - check that devtools is loaded

***back to slides***

```{r}
use_r("lib-summary")
```

```{r}
lib_summary <- function() {
  pkgs <- utils::installed.packages()
  pkg_tbl <- table(pkgs[, "LibPath"])
  pkg_df <- as.data.frame(pkg_tbl, stringsAsFactors = FALSE)
  names(pkg_df) <- c("Library", "n_packages")
  pkg_df
}
```

***back to slides***

```{r}
load_all()

lib_summary()
```

**Commit**

***back to slides***

```{r}
check()
```

***back to slides***

Open DESCRIPTION file

```{r}
use_mit_license()
```

**Commit**

***back to slides***

DESCRIPTION file:

```         
Package: libminer
Title: Explore Your R Libraries
Version: 0.0.0.9000
Authors@R: 
    person("Andy", "Teucher", , "andy.teucher@gmail.com", role = c("aut", "cre"),
           comment = c(ORCID = "0000-0002-7840-692X"))
Description: Provides functions for learning about your R libraries, and the 
    packages you have installed.
```

***back to slides***

```{r}
check()
```

**Commit**

***back to slides***


#### Push all your committed code to that repository


```{r}
use_github()
```

At this step you may be required to enter in your GitHub username and password.

```{bash}
git push --set-upstream origin main
```

Go to GitHub page, explore show clone of local

***back to slides***

```{r}
edit_r_profile()
```

*put this in the chat*

```{r}
# Set usethis options
# 
options(
  usethis.description = list(
    "Authors@R" = utils::person(
      "Jane", "Doe",
      email = "jane@example.com",
      role = c("aut", "cre"),
      comment = c(ORCID = "0000-1111-2222-3333")
    )
  )
)

options(
  usethis.description = list(
    "Authors@R" = utils::person(
      "Andy", "Teucher",
      email = "andy.teucher@gmail.com",
      role = c("aut", "cre"),
      comment = c(ORCID = "0000-0002-7840-692X")
    )
  )
)

options(
  warnPartialMatchArgs = TRUE,
  warnPartialMatchDollar = TRUE,
  warnPartialMatchAttr = TRUE
)
```

***back to slides***

## Documentation

`Ctrl + .`

`Ctrl+Alt+Shift+R`

``` r
#' R Library Summary
#'
#' Provides a brief summary of the package libraries on your machine
#'
#' @return A data.frame containing the count of packages in each of the user's
#'   libraries
#' @export
#'
#' @examples
#' lib_summary()
```

```{r}
document()
```

Go to `man/lib_summary.Rd`

```{r}
load_all()

?lib_summary
```

```{r}
check()
```

Look at NAMESPACE

**commit**

***back to slides***

### Package-level documentation

```{r}
use_package_doc()

document()
```

Go to `man/libminer2-package.Rd`

Preview and check again

```{r}
load_all()

?libminer

check()
```

***back to slides***

```{r}
install()
library(libminer)

lib_summary() # note one more package than before - that's yours!
```

**commit and push**


## README

```{r}
use_readme_rmd()
```

````         
---
output: github_document
---

<!-- README.md is generated from README.Rmd. Please edit that file -->

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "man/figures/README-",
  out.width = "100%"
)
```

# libminer

<!-- badges: start -->

<!-- badges: end -->

The goal of libminer is to provide an overview of your R library setup. It is a toy
package created as a part of a workshop and not meant for serious use.

## Installation

You can install the development version of libminer from [GitHub](https://GitHub.com/) with:

```r
# install.packages("devtools")
devtools::install_GitHub("ateucher/libminer")
```

## Example usage

To get a count of installed packages in each of your library locations, 
optionally with the total sizes, use the `lib_summary()` function:

```{{r example}}
library(libminer)
lib_summary()
# specify `sizes = TRUE` to calculate the total size on disk of your packages
lib_summary(sizes = TRUE)
```
````

```{r}
build_readme()
```

```{r}
check()

install()
```

**commit + push**

*return to slides*

## Testing

**restart R**

```{r}
use_testthat()
```

Have `R/lib-summary.R` open

```{r}
use_test()
```

```{r}
test_that("lib_summary returns expected results", {
  res <- lib_summary()
  expect_s3_class(res, "data.frame")
  expect_equal(ncol(res), 2)
  expect_equal(names(res), c("Library", "n_packages"))
  expect_type(res$Library, "character")
  expect_type(res$n_packages, "integer")
})

test_that("lib_summary fails appropriately", {
  expect_error(lib_summary("foo"), "unused argument")
})
```

```{r}
test()

check()
```

*reinforce file structure*

**commit**

***back to slides***

## Dependencies

```{r}
use_package("fs")

```

**Look at DESCRIPTION, NAMESPACE (no change)**

**commit**

```{r}
lib_summary <- function(sizes = FALSE) {
  if (!is.logical(sizes)) {
    stop("'sizes' must be logical (TRUE/FALSE).")
  }
  
  pkgs <- utils::installed.packages()
  pkg_tbl <- table(pkgs[, "LibPath"])
  pkg_df <- as.data.frame(pkg_tbl, stringsAsFactors = FALSE)
  names(pkg_df) <- c("Library", "n_packages")

  if (sizes) {
    pkg_df$lib_size <- vapply(
      pkg_df$Library,
      function(x) {
        sum(fs::file_size(fs::dir_ls(x, recurse = TRUE)))
      },
      FUN.VALUE = numeric(1)
    )
  }
  pkg_df
}
```

```{r}
test() # failure for unused argument
```

```{r}
test_that("lib_summary fails appropriately", {
  expect_error(lib_summary(sizes = "foo"), "'sizes' must be logical")
})

test_that("sizes argument works", {
  res <- lib_summary(sizes = TRUE)
  expect_equal(names(res), c("Library", "n_packages", "lib_size"))
  expect_type(res$lib_size, "double")
})
```

**commit**

```{r}
check() # will warn about undocumented parameter
```

Ctrl+Alt+Shift+R will insert the spot for the sizes param

```{r}
#' Provides a brief summary of the package libraries on your machine
#'
#' @param sizes Should the sizes of the libraries be calculated?
#'   Logical; default `FALSE`.
#'
#' @return A data.frame containing the count of packages in each of the user's
#'   libraries. A `lib_size` column is included if `sizes = TRUE`.
#' @export
#'
#' @examples
#' lib_summary()
#' lib_summary(sizes = TRUE)
```

```{r}
document()

check()
```

Test it out

```{r}
load_all()

?lib_summary

lib_summary(sizes = TRUE)
```

**commit**

***back to slides***

```{r}
use_import_from("purrr", "map_dbl")
```

*Look at: DESCRIPTION, R/libminer-package.R, NAMESPACE* and see what that did.

```{r}
lib_summary <- function(sizes = FALSE) {
  pkgs <- utils::installed.packages()
  pkg_tbl <- table(pkgs[, "LibPath"])
  pkg_df <- as.data.frame(pkg_tbl, stringsAsFactors = FALSE)
  names(pkg_df) <- c("Library", "n_packages")

  if (sizes) {
    pkg_df$lib_size <- map_dbl(
      pkg_df$Library,
      \(x) sum(fs::file_size(fs::dir_ls(x, recurse = TRUE))),
    )
  }

  pkg_df
}
```

```{r}
test()
```

**Note importance of tests here**

```{r}
check()
```

**commit and push**

## Continuous Integration

```{r}
use_github_action()
```

**commit and push**

*return to slides*

# Design Principles

Refactor this function to add 2 helper functions
```{r}
lib_summary <- function(sizes = FALSE) {
  pkgs <- utils::installed.packages()
  pkg_tbl <- table(pkgs[, "LibPath"])
  pkg_df <- as.data.frame(pkg_tbl, stringsAsFactors = FALSE)
  names(pkg_df) <- c("Library", "n_packages")
  
  if (sizes) {
    pkg_df$lib_size <- map_dbl(
      pkg_df$Library,
      \(x) sum(fs::file_size(fs::dir_ls(x, recurse = TRUE))),
    )
  }
  pkg_df
}
```

into:

```{r}
#' Generate a dataframe of installed packages
#' 
#' @return dataframe of all packages installed on a system
lib <- function() {
  pkgs <- utils::installed.packages()
  as.data.frame(pkgs, stringsAsFactors = FALSE)
}

#' calculate sizes
#'
#' @param df a data.frame
#'
#' @return df with a lib_size column
#' @noRd
calculate_sizes <- function(df) {
  df$lib_size <- map_dbl(
    df$library,
    \(x) sum(file_size(dir_ls(x, recurse = TRUE)))
  )
  df
}

lib_summary <- function(sizes = FALSE) {
  pkg_df <- lib()
  pkg_df <- table(pkg_df$LibPath)
  pkg_df <- as.data.frame(pkg_df, stringsAsFactors = FALSE)
  names(pkg_df) <- c("Library", "n_packages")
  
  if (sizes) {
    pkg_df <- calculate_sizes(pkg_df)
  }
  pkg_df
}
```

`check, commit and push`

No `fs::`


```{r}
#' Generate a dataframe of installed packages
#' 
#' @return dataframe of all packages installed on a system
#' @export
lib <- function() {
  pkgs <- utils::installed.packages()
  as.data.frame(pkgs, stringsAsFactors = FALSE)
}

#' calculate sizes
#'
#' @param df a data.frame
#'
#' @return df with a lib_size column
#' @noRd
calculate_sizes <- function(df) {
  df$lib_size <- map_dbl(
    df$library,
    \(x) sum(fs::file_size(fs::dir_ls(x, recurse = TRUE)))
  )
  df
}

lib_summary <- function(sizes = FALSE) {
  pkg_df <- lib()
  pkg_df <- table(pkg_df$LibPath)
  pkg_df <- as.data.frame(pkg_df, stringsAsFactors = FALSE)
  names(pkg_df) <- c("Library", "n_packages")
  
  if (sizes) {
    pkg_df <- calculate_sizes(pkg_df)
  }
  pkg_df
}
```

** back slides **

## Input checking

```{r}
lib_summary <- function(sizes = FALSE) {
  pkg_df <- lib()
  pkg_df <- table(pkg_df$LibPath)
  pkg_df <- as.data.frame(pkg_df, stringsAsFactors = FALSE)
  names(pkg_df) <- c("Library", "n_packages")
  
  if (sizes) {
    pkg_df <- calculate_sizes(pkg_df)
  }
  pkg_df
}
```

to:

```{r}
lib_summary <- function(sizes = FALSE) {
  if (!is.logical(sizes)) {
    stop("sizes should be a logical (TRUE/FALSE) value", call. = FALSE)
  }
  pkg_df <- lib()
  pkg_df <- table(pkg_df$LibPath)
  pkg_df <- as.data.frame(pkg_df, stringsAsFactors = FALSE)
  names(pkg_df) <- c("Library", "n_packages")
  
  if (sizes) {
    pkg_df <- calculate_sizes(pkg_df)
  }
  pkg_df
}
```

## Add a test

```{r}
expect_error(lib_summary(sizes = 10))
```

## update README
- include `lib()`

*back to slides*

## Code readability

demo styler

# Creating a website

** go over what files were created **
```{r}
use_pkgdown_github_pages()
```

## Vignettes

** go over what files were created **
```{r}
use_vignette("lib-sitrep", "Package Library Situation Report")
```

** add an article with ggplot2 **
```{r}
use_article("musings-lib", title = "Musings on the state of libminer")
```

add ggplot2 to action

## Tidyverse

### Demo - not part of package

Do in a new file eg scratch/tidyverse-testing.R and add scratch to Rbuildignore

### data masking

Error: object mpg not found

```{r}
var_summary <- function(data, var) {
  data |> 
    summarise(
      min = min(var),
      max = max(var)
    )
}

mtcars |> 
  group_by(cyl) |> 
  var_summary(mpg)
```

```{r}
var_summary <- function(data, var) {
  data |> 
    summarise(
      min = min({{ var }}),
      max = max({{ var }})
    )
}

mtcars |> 
  group_by(cyl) |> 
  var_summary(mpg)
```

```{r}
big_cars_summary <- function(var) {
  mtcars |> 
    filter(.data$cyl >= 6) |> 
    group_by(.data$cyl) |> 
    summarise(
      n = n(), 
      mean = mean({{ var }}), 
    )
}

big_cars_summary(disp)
```

### Your turn solution

```{r}
height_sum <- function(data, group_var) {
  data |> 
    dplyr::group_by({{ group_var }}) |> 
    dplyr::summarise(
      n = dplyr::n(),
      mean_height = mean(.data$height)
    )
}

height_sum(starwars, hair_color)
```

### Your turn solution

```{r}
height_sum <- function(data, ...) {
  data |> 
    dplyr::group_by(...) |> 
    dplyr::summarise(
      n = dplyr::n(),
      mean_height = mean(.data$height)
    )
}

height_sum(starwars, hair_color, eye_color)
```

### Dynamic dots

```{r}
var_summary <- function(data, var) {
  data |> 
    summarise(
      "{{var}}_min" := min({{ var }})
    )
}

mtcars |> 
  group_by(cyl) |> 
  var_summary(mpg)

```

### Your turn solution

```{r}
dynamic_sum <- function(data, group_var, sum_var) {
  data |> 
    dplyr::group_by({{ group_var }}) |> 
    dplyr::summarise(
      n = dplyr::n(),
      "mean_{{sum_var}}" := mean({{ sum_var }})
    )
}

dynamic_sum(starwars, hair_color, mass)
```

### Setup

```{r}
use_package("dplyr")
```

We are using the new base pipe, need R >= 4.1

```{r}
lib_summary <- function(by) {
  pkgs <- lib()

  dplyr::group_by(pkgs, by) |>
    dplyr::count()
}
```

```{r}
load_all()
lib_summary(LibPath)
```

**Errors - no column called 'by'**

### 2a - use curly-curly with bare names

```{r}
lib_summary <- function(by) {
  pkgs <- lib()

  dplyr::group_by(pkgs, {{ by }}) |>
    dplyr::count()
}
```

```{r}
load_all()
lib_summary(LibPath)
```

### 2b - use .data[[x]] with character

```{r}
use_import_from("rlang", ".data")
```

```{r}
lib_summary <- function(by) {
  pkgs <- lib()

  dplyr::group_by(pkgs, .data[[by]]) |>
    dplyr::count()
}
```

```{r}
load_all()
lib_summary("License")
```

### 3 - add sizes

```{r}
lib_summary <- function(by) {
  pkgs <- lib()
  
  pkgs <- calculate_sizes(pkgs)
  
  dplyr::group_by(pkgs, {{by}}) |>
    dplyr::summarise(
      n = dplyr::n(), 
      size = sum(size)
    )
}

calculate_sizes <- function(df) {
  df |> 
    dplyr::mutate(
      size = purrr::map_dbl(
        fs::path(LibPath, Package),
        \(x) sum(fs::file_size(fs::dir_ls(x, recurse = TRUE)))
      )
    )
}
```

```{r}
load_all()
lib_summary(LibPath)
check() # should throw notes about undefined globals
```

### 4 - add .data

```{r}
lib_summary <- function(by) {
  pkgs <- lib()
  
  pkgs <- calculate_sizes(pkgs)
  
  dplyr::group_by(pkgs, {{by}}) |>
    dplyr::summarise(
      n = dplyr::n(), 
      size = sum(.data$size)
    )
}

calculate_sizes <- function(df) {
  df |> 
    dplyr::mutate(
      size = purrr::map_dbl(
        fs::path(.data$LibPath, .data$Package),
        \(x) sum(fs::file_size(fs::dir_ls(x, recurse = TRUE)))
      )
    )
}
```

### 5 use ... for multiple by's

```{r}
lib_summary <- function(...) {
  lib() |> 
    calculate_sizes() |> 
    dplyr::group_by(...) |> 
    dplyr::summarise(
      n = dplyr::n(),
      size = sum(.data$size)
    )
}
```

### Final - make sizes conditional again

Also, drop groups so we don't get the message any more

```{r}
lib_summary <- function(..., sizes = FALSE) {
  if (!is.logical(sizes)) {
    stop("'sizes' must be logical (TRUE/FALSE).", call. = FALSE)
  }
  
  lib() |> 
    calculate_sizes(do_calc = sizes) |> 
    dplyr::group_by(...) |> 
    dplyr::summarise(
      n = dplyr::n(),
      dplyr::across(dplyr::any_of("size"), sum),
      .groups = "drop"
    )
}

calculate_sizes <- function(df, do_calc) {
  if (!isTRUE(do_calc)) return(df)
  
  df |> 
    dplyr::mutate(
      size = purrr::map_dbl(
        fs::path(.data$LibPath, .data$Package),
        \(x) sum(fs::file_size(fs::dir_ls(x, recurse = TRUE)))
      )
    )
}

lib <- function() {
  utils::installed.packages() |> 
    dplyr::as_tibble()
}

lib_summary(LibPath, License)
lib_summary(LibPath, License, sizes = TRUE)
lib_summary(LibPath, License, sizes = 10)
```

```{r}
test()
# update tests
check()
# update documentation
```

## CLI

### Final

```{r}
lib_summary <- function(..., sizes = FALSE) {
  if (!is.logical(sizes)) {
    cli::cli_abort("You supplied {.val {sizes}} to {.var sizes}. It should be a {.cls logical} value, not {.obj_type_friendly {sizes}}.")
  }
  
  lib() |> 
    calculate_sizes(do_calc = sizes) |> 
    dplyr::group_by(...) |> 
    dplyr::summarise(
      n = dplyr::n(),
      dplyr::across(dplyr::any_of("size"), sum),
      .groups = "drop"
    )
}

calculate_sizes <- function(df, do_calc) {
  if (!isTRUE(do_calc)) return(df)
  
  cli::cli_inform(c("i" = "Calculating sizes..."))
  
  df |> 
    dplyr::mutate(
      size = purrr::map_dbl(
        fs::path(.data$LibPath, .data$Package),
        \(x) sum(fs::file_size(fs::dir_ls(x, recurse = TRUE)))
      )
    )
}
```

```{r}
lib_summary(LibPath, License)
lib_summary(LibPath, License, sizes = TRUE)
lib_summary(LibPath, License, sizes = 10)
lib_summary(LibPath, License, sizes = "hello")
lib_summary(LibPath, License, sizes = NULL)
```

### update tests

- snapshot for error
- groups


## Releasing

```{r}
use_news_md()
```

